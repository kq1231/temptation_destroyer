// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/achievement_model.dart';
import 'data/models/ai_models.dart';
import 'data/models/aspiration_model.dart';
import 'data/models/challenge_model.dart';
import 'data/models/chat_history_settings_model.dart';
import 'data/models/chat_session_model.dart';
import 'data/models/emergency_session_model.dart';
import 'data/models/hadith_model.dart';
import 'data/models/hobby_model.dart';
import 'data/models/islamic_content_model.dart';
import 'data/models/statistics_model.dart';
import 'data/models/trigger_model.dart';
import 'data/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 8038929499369523082),
      name: 'AspirationModel',
      lastPropertyId: const obx_int.IdUid(14, 883643344588905737),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 23304912838466421),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8453437843819331460),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(5, 2521924568791733273)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7420555856425195886),
            name: 'dua',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2891736367259188810),
            name: 'isAchieved',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 7243749976480602437),
            name: 'targetDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1866512700588382508),
            name: 'note',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1070899588276822817),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4435921661956222223),
            name: 'achievedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 620335365088470462),
            name: 'isEncrypted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 883643344588905737),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 4505480076388769121),
      name: 'ChatHistorySettings',
      lastPropertyId: const obx_int.IdUid(4, 6623205066321315835),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8965043584036134040),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3602469054736069059),
            name: 'storeChatHistory',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8532966641792521154),
            name: 'autoDeleteAfterDays',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6623205066321315835),
            name: 'lastCleared',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(8, 4131266175279097061),
      name: 'ChatMessageModel',
      lastPropertyId: const obx_int.IdUid(9, 7516328470501572854),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4246612909578813734),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3114175433637546436),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(6, 6153727445342815698)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 928851796564468241),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 607444390803571562),
            name: 'isUserMessage',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8339599868613333553),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2588843359393737065),
            name: 'isEncrypted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3666469237871487651),
            name: 'role',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5340697945452502162),
            name: 'wasHelpful',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 7516328470501572854),
            name: 'sessionId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(11, 1698625639249539995),
            relationTarget: 'ChatSession')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(9, 8628637741962715112),
      name: 'EmergencySession',
      lastPropertyId: const obx_int.IdUid(10, 5085942315203135592),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7749448877122072055),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5801053582782848985),
            name: 'sessionId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(7, 4090512242824674080)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1123333626856611741),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6316297896790899910),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1176541736828965737),
            name: 'activeTriggerIds',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2120227240715610739),
            name: 'wasAIGuidanceShown',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 519754010540436084),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 105727403335945723),
            name: 'intensity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 341370545983928423),
            name: 'wasSuccessful',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5085942315203135592),
            name: 'helpfulStrategies',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(10, 8340466199117957427),
      name: 'HobbyModel',
      lastPropertyId: const obx_int.IdUid(18, 2099984524798230988),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5898591615488565605),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7743864478258256205),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(8, 407504552681484699)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5670643447286165687),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4599182935941550225),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1039785768554750610),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 2462457338400032727),
            name: 'isEncrypted',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 3621252245498381568),
            name: 'frequencyGoal',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 8607792756904392621),
            name: 'durationGoalMinutes',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 8479111339213196151),
            name: 'satisfactionRating',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 3619416543117857483),
            name: 'lastPracticedAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 2099984524798230988),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(11, 4909300790776885457),
      name: 'Trigger',
      lastPropertyId: const obx_int.IdUid(12, 3885677959703952956),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7225158478899216332),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8710528896938068727),
            name: 'triggerId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(9, 759429143322953816)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6822993285652899234),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1789007516772421337),
            name: 'intensity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5820162568708265027),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2851426920116437598),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 813308995838187822),
            name: 'activeTimes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4555371641017178831),
            name: 'activeDays',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 344814719254923249),
            name: 'activeTimesList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 5757231406194431639),
            name: 'activeDaysList',
            type: 27,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 3885677959703952956),
            name: 'dbTriggerType',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(12, 732594421888719398),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(11, 2507643350163163335),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2288705050104329307),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5289230246256388199),
            name: 'hashedPassword',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8102910547392366590),
            name: 'passwordSalt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6745765736988837930),
            name: 'lastLoginDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 5161014558321515296),
            name: 'securityQuestions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6748223421430813969),
            name: 'recoveryCodes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1482035989455239295),
            name: 'customApiKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8181983465992276639),
            name: 'apiServiceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4370594521017770630),
            name: 'isFirstLogin',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4171318181986782160),
            name: 'failedRecoveryAttempts',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2507643350163163335),
            name: 'lastFailedRecoveryAttempt',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(13, 8727171351529036691),
      name: 'AchievementModel',
      lastPropertyId: const obx_int.IdUid(11, 2751991778965899524),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2454347672392735220),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 72062671215571720),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5959661195628714842),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 872021902230204963),
            name: 'iconName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8169290538927562969),
            name: 'pointValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8323834235562674511),
            name: 'progressCurrent',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6795396637405496494),
            name: 'progressTarget',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6943725976307260986),
            name: 'isUnlocked',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1307140691138803226),
            name: 'unlockedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 9167378989389790356),
            name: 'dbType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2751991778965899524),
            name: 'dbRarity',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(15, 350288135938892979),
      name: 'IslamicContentModel',
      lastPropertyId: const obx_int.IdUid(14, 1376356402816636753),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 914324873678138371),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7026018156390315011),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1752177040255332345),
            name: 'source',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1726675062372878000),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 383312090809805267),
            name: 'translation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5998192573725892957),
            name: 'explanation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8728036941673631706),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8054918944823158674),
            name: 'dateAdded',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2445186302599409806),
            name: 'lastDisplayed',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1499394971133426049),
            name: 'displayCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1040919115621643460),
            name: 'tags',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4533540931259126800),
            name: 'tagsList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 6387744601090761748),
            name: 'dbContentType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1376356402816636753),
            name: 'dbCategory',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(16, 743654954329388563),
      name: 'StatisticsModel',
      lastPropertyId: const obx_int.IdUid(14, 5169979496602751298),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5859877080858308701),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1404817324584049413),
            name: 'currentStreak',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4060985869285947973),
            name: 'bestStreak',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6880591521780108447),
            name: 'streakStartDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1774891100113591476),
            name: 'lastUpdatedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2041886617420147455),
            name: 'triggerDatesJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 4484377666488245544),
            name: 'slipDatesJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 331437351608544223),
            name: 'milestoneDatesJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1528754796148074031),
            name: 'totalEmergenciesSurvived',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3846208602707829796),
            name: 'totalChallengesCompleted',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 7600493799752936234),
            name: 'weeklyImprovement',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 4427025899117756286),
            name: 'monthlyImprovement',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4820972010609928336),
            name: 'triggerPatternJson',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 5169979496602751298),
            name: 'timePatternJson',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(17, 217179038919877321),
      name: 'ChallengeModel',
      lastPropertyId: const obx_int.IdUid(14, 1324534713031972589),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2858300394763802773),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3000836775073440933),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6087525321701616960),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3789883188495055689),
            name: 'dbCategory',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9009465735535412280),
            name: 'dbDifficulty',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 2675901883011765917),
            name: 'dbStatus',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2932705562591583327),
            name: 'assignedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5533398010461361992),
            name: 'completedDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 4324220224584262594),
            name: 'isCustom',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3729943166007595706),
            name: 'pointValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 1726734724348419897),
            name: 'verificationSteps',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2185420921258088208),
            name: 'dbCategoryValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 4430483338555402661),
            name: 'dbDifficultyValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1324534713031972589),
            name: 'dbStatusValue',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(18, 7433238821226147054),
      name: 'HadithModel',
      lastPropertyId: const obx_int.IdUid(9, 2903950005859628711),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5802108579040889413),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7024532681656402580),
            name: 'text',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4876511309703618427),
            name: 'narrator',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5656792127345257754),
            name: 'source',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 454985034194373546),
            name: 'reference',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5267523756897109773),
            name: 'translation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8215878815527103886),
            name: 'explanation',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8040190924220253343),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 2903950005859628711),
            name: 'lastShownDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(19, 7809979764960026324),
      name: 'ChatSession',
      lastPropertyId: const obx_int.IdUid(20, 3728390860473653931),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2032386478239063204),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1233456887712646138),
            name: 'uid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(10, 2311241240915069713)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5354558632981592896),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3725312404294476750),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6678745610595351982),
            name: 'lastModified',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8915251321233953683),
            name: 'topic',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3766972651957674831),
            name: 'messageCount',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 8279218058055743343),
            name: 'tags',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 2277397690372409125),
            name: 'selectedModel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2048779289393532091),
            name: 'isArchived',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(13, 265624567601690720),
            name: 'isFavorite',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 1664372390943338761),
            name: 'metadata',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 5980980740657422056),
            name: 'dbSessionType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(16, 1704094128167665651),
            name: 'dbServiceType',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(17, 5607894414324050060),
            name: 'preferredModel',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(18, 5749071218933266812),
            name: 'allowDataTraining',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(19, 8306940704976111897),
            name: 'temperature',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(20, 3728390860473653931),
            name: 'maxTokens',
            type: 6,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(20, 4435633126864489129),
      name: 'ChatHistorySettingsModel',
      lastPropertyId: const obx_int.IdUid(4, 9036995426304390336),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5837366745104670180),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3772452937078425619),
            name: 'storeChatHistory',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5925583620411210632),
            name: 'autoDeleteAfterDays',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 9036995426304390336),
            name: 'lastCleared',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(20, 4435633126864489129),
      lastIndexId: const obx_int.IdUid(11, 1698625639249539995),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        565911162749560298,
        8755138201011373113,
        4857296881808942799,
        195410999980337083,
        5382531126528966459,
        6684572823739821310
      ],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        1615750766328326112,
        5571737721030089582,
        3154935104438855566,
        4231261392579040681,
        2681554415396974063,
        767168598278742911,
        1422745122981706590,
        6815928807855179292,
        1579482186747108307,
        1245832919544223211,
        2167728151839681866,
        7620108606640191335,
        8262529195314612134,
        7646292331246731586,
        2588605991265152809,
        8245590564100759391,
        2270421302834360664,
        3322285039199958135,
        162608734531038007,
        5317087322181146925,
        8278726151384783726,
        1024703197263590431,
        8702117622623828049,
        4135519897461469362,
        3324290692423908662,
        2411309932995274532,
        4795934497715024907,
        8137783214183318794,
        5491796628158094474,
        3988049051118326264,
        6165037033586125045,
        8538049812891270845,
        8047209285624182291,
        7567276621680032467,
        813328325650535162,
        5299953927144011070,
        7946734572044867549,
        8385082509793175043,
        1844444119017765496,
        6560906498271996966,
        1483791641364040888,
        3626138294483248116,
        81139484235961090,
        3633703736518874286,
        3962834585581653776,
        2713843898873615780,
        6313079241512327470,
        8971349064232920549,
        8546112109436291406,
        2918037849389922510,
        3532758836093894991,
        7791586473946983498,
        1057345135502437387,
        5067274015992965940,
        4342891463210118895,
        2914712536729965648,
        2065960333714854431,
        8060149680020338552,
        554570590989212876,
        9172255039743366101,
        3422233065008435390,
        9010034396928681793,
        7284077518790205545,
        8039466220283059300,
        1185105766014409847,
        2355316464666904892,
        6112304331995016060,
        6049819857264738469,
        2219895886433063406,
        8067232528677260136,
        6408614864208921134,
        735994827260583777,
        6777513656975215707,
        241618885501133761
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AspirationModel: obx_int.EntityDefinition<AspirationModel>(
        model: _entities[0],
        toOneRelations: (AspirationModel object) => [],
        toManyRelations: (AspirationModel object) => {},
        getId: (AspirationModel object) => object.id,
        setId: (AspirationModel object, int id) {
          object.id = id;
        },
        objectToFB: (AspirationModel object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final duaOffset = fbb.writeString(object.dua);
          final noteOffset =
              object.note == null ? null : fbb.writeString(object.note!);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, duaOffset);
          fbb.addBool(4, object.isAchieved);
          fbb.addInt64(5, object.targetDate?.millisecondsSinceEpoch);
          fbb.addOffset(6, noteOffset);
          fbb.addInt64(7, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(8, object.achievedDate?.millisecondsSinceEpoch);
          fbb.addBool(9, object.isEncrypted);
          fbb.addInt64(13, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final targetDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final achievedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final duaParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isAchievedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final targetDateParam = targetDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(targetDateValue);
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final achievedDateParam = achievedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(achievedDateValue);
          final object = AspirationModel(
              id: idParam,
              uid: uidParam,
              dua: duaParam,
              isAchieved: isAchievedParam,
              targetDate: targetDateParam,
              note: noteParam,
              createdAt: createdAtParam,
              achievedDate: achievedDateParam)
            ..isEncrypted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false)
            ..dbCategory = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 30);

          return object;
        }),
    ChatHistorySettings: obx_int.EntityDefinition<ChatHistorySettings>(
        model: _entities[1],
        toOneRelations: (ChatHistorySettings object) => [],
        toManyRelations: (ChatHistorySettings object) => {},
        getId: (ChatHistorySettings object) => object.id,
        setId: (ChatHistorySettings object, int id) {
          object.id = id;
        },
        objectToFB: (ChatHistorySettings object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addBool(1, object.storeChatHistory);
          fbb.addInt64(2, object.autoDeleteAfterDays);
          fbb.addInt64(3, object.lastCleared.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final storeChatHistoryParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
          final autoDeleteAfterDaysParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final lastClearedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = ChatHistorySettings(
              id: idParam,
              storeChatHistory: storeChatHistoryParam,
              autoDeleteAfterDays: autoDeleteAfterDaysParam,
              lastCleared: lastClearedParam);

          return object;
        }),
    ChatMessageModel: obx_int.EntityDefinition<ChatMessageModel>(
        model: _entities[2],
        toOneRelations: (ChatMessageModel object) => [object.session],
        toManyRelations: (ChatMessageModel object) => {},
        getId: (ChatMessageModel object) => object.id,
        setId: (ChatMessageModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChatMessageModel object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final contentOffset = fbb.writeString(object.content);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, contentOffset);
          fbb.addBool(3, object.isUserMessage);
          fbb.addInt64(4, object.timestamp.millisecondsSinceEpoch);
          fbb.addBool(5, object.isEncrypted);
          fbb.addOffset(6, roleOffset);
          fbb.addBool(7, object.wasHelpful);
          fbb.addInt64(8, object.session.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final isUserMessageParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false);
          final roleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final wasHelpfulParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final object = ChatMessageModel(
              id: idParam,
              uid: uidParam,
              content: contentParam,
              isUserMessage: isUserMessageParam,
              role: roleParam,
              timestamp: timestampParam,
              wasHelpful: wasHelpfulParam)
            ..isEncrypted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          object.session.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          object.session.attach(store);
          return object;
        }),
    EmergencySession: obx_int.EntityDefinition<EmergencySession>(
        model: _entities[3],
        toOneRelations: (EmergencySession object) => [],
        toManyRelations: (EmergencySession object) => {},
        getId: (EmergencySession object) => object.id,
        setId: (EmergencySession object, int id) {
          object.id = id;
        },
        objectToFB: (EmergencySession object, fb.Builder fbb) {
          final sessionIdOffset = fbb.writeString(object.sessionId);
          final activeTriggerIdsOffset = object.activeTriggerIds == null
              ? null
              : fbb.writeString(object.activeTriggerIds!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final helpfulStrategiesOffset = object.helpfulStrategies == null
              ? null
              : fbb.writeString(object.helpfulStrategies!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, sessionIdOffset);
          fbb.addInt64(2, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime?.millisecondsSinceEpoch);
          fbb.addOffset(4, activeTriggerIdsOffset);
          fbb.addBool(5, object.wasAIGuidanceShown);
          fbb.addOffset(6, notesOffset);
          fbb.addInt64(7, object.intensity);
          fbb.addBool(8, object.wasSuccessful);
          fbb.addOffset(9, helpfulStrategiesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sessionIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final activeTriggerIdsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final wasAIGuidanceShownParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final intensityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final wasSuccessfulParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final helpfulStrategiesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final object = EmergencySession(
              id: idParam,
              sessionId: sessionIdParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              activeTriggerIds: activeTriggerIdsParam,
              wasAIGuidanceShown: wasAIGuidanceShownParam,
              notes: notesParam,
              intensity: intensityParam,
              wasSuccessful: wasSuccessfulParam,
              helpfulStrategies: helpfulStrategiesParam);

          return object;
        }),
    HobbyModel: obx_int.EntityDefinition<HobbyModel>(
        model: _entities[4],
        toOneRelations: (HobbyModel object) => [],
        toManyRelations: (HobbyModel object) => {},
        getId: (HobbyModel object) => object.id,
        setId: (HobbyModel object, int id) {
          object.id = id;
        },
        objectToFB: (HobbyModel object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = object.description == null
              ? null
              : fbb.writeString(object.description!);
          final frequencyGoalOffset = object.frequencyGoal == null
              ? null
              : fbb.writeString(object.frequencyGoal!);
          fbb.startTable(19);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, descriptionOffset);
          fbb.addInt64(8, object.createdAt.millisecondsSinceEpoch);
          fbb.addBool(9, object.isEncrypted);
          fbb.addOffset(12, frequencyGoalOffset);
          fbb.addInt64(13, object.durationGoalMinutes);
          fbb.addInt64(14, object.satisfactionRating);
          fbb.addInt64(15, object.lastPracticedAt?.millisecondsSinceEpoch);
          fbb.addInt64(17, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastPracticedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 34);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 10);
          final frequencyGoalParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 28);
          final durationGoalMinutesParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 30);
          final satisfactionRatingParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0));
          final lastPracticedAtParam = lastPracticedAtValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastPracticedAtValue);
          final object = HobbyModel(
              id: idParam,
              uid: uidParam,
              name: nameParam,
              description: descriptionParam,
              frequencyGoal: frequencyGoalParam,
              durationGoalMinutes: durationGoalMinutesParam,
              satisfactionRating: satisfactionRatingParam,
              createdAt: createdAtParam,
              lastPracticedAt: lastPracticedAtParam)
            ..isEncrypted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false)
            ..dbCategory = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 38);

          return object;
        }),
    Trigger: obx_int.EntityDefinition<Trigger>(
        model: _entities[5],
        toOneRelations: (Trigger object) => [],
        toManyRelations: (Trigger object) => {},
        getId: (Trigger object) => object.id,
        setId: (Trigger object, int id) {
          object.id = id;
        },
        objectToFB: (Trigger object, fb.Builder fbb) {
          final triggerIdOffset = fbb.writeString(object.triggerId);
          final descriptionOffset = fbb.writeString(object.description);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final activeTimesOffset = object.activeTimes == null
              ? null
              : fbb.writeString(object.activeTimes!);
          final activeDaysOffset = object.activeDays == null
              ? null
              : fbb.writeString(object.activeDays!);
          final activeTimesListOffset = fbb.writeList(object.activeTimesList
              .map(fbb.writeString)
              .toList(growable: false));
          final activeDaysListOffset =
              fbb.writeListInt64(object.activeDaysList);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, triggerIdOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(4, object.intensity);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, notesOffset);
          fbb.addOffset(7, activeTimesOffset);
          fbb.addOffset(8, activeDaysOffset);
          fbb.addOffset(9, activeTimesListOffset);
          fbb.addOffset(10, activeDaysListOffset);
          fbb.addInt64(11, object.dbTriggerType);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final triggerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final intensityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final activeTimesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final activeDaysParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Trigger(
              id: idParam,
              triggerId: triggerIdParam,
              description: descriptionParam,
              intensity: intensityParam,
              createdAt: createdAtParam,
              notes: notesParam,
              activeTimes: activeTimesParam,
              activeDays: activeDaysParam)
            ..activeTimesList = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 22, [])
            ..activeDaysList =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 24, [])
            ..dbTriggerType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 26);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[6],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final hashedPasswordOffset = fbb.writeString(object.hashedPassword);
          final passwordSaltOffset = object.passwordSalt == null
              ? null
              : fbb.writeString(object.passwordSalt!);
          final securityQuestionsOffset = object.securityQuestions == null
              ? null
              : fbb.writeString(object.securityQuestions!);
          final recoveryCodesOffset = object.recoveryCodes == null
              ? null
              : fbb.writeString(object.recoveryCodes!);
          final customApiKeyOffset = object.customApiKey == null
              ? null
              : fbb.writeString(object.customApiKey!);
          final apiServiceTypeOffset = object.apiServiceType == null
              ? null
              : fbb.writeString(object.apiServiceType!);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, hashedPasswordOffset);
          fbb.addOffset(2, passwordSaltOffset);
          fbb.addInt64(3, object.lastLoginDate?.millisecondsSinceEpoch);
          fbb.addOffset(4, securityQuestionsOffset);
          fbb.addOffset(5, recoveryCodesOffset);
          fbb.addOffset(6, customApiKeyOffset);
          fbb.addOffset(7, apiServiceTypeOffset);
          fbb.addBool(8, object.isFirstLogin);
          fbb.addInt64(9, object.failedRecoveryAttempts);
          fbb.addInt64(
              10, object.lastFailedRecoveryAttempt?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastLoginDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final lastFailedRecoveryAttemptValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 24);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final hashedPasswordParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final passwordSaltParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final lastLoginDateParam = lastLoginDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastLoginDateValue);
          final securityQuestionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final recoveryCodesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final customApiKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final apiServiceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final isFirstLoginParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final failedRecoveryAttemptsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final lastFailedRecoveryAttemptParam =
              lastFailedRecoveryAttemptValue == null
                  ? null
                  : DateTime.fromMillisecondsSinceEpoch(
                      lastFailedRecoveryAttemptValue);
          final object = User(
              id: idParam,
              hashedPassword: hashedPasswordParam,
              passwordSalt: passwordSaltParam,
              lastLoginDate: lastLoginDateParam,
              securityQuestions: securityQuestionsParam,
              recoveryCodes: recoveryCodesParam,
              customApiKey: customApiKeyParam,
              apiServiceType: apiServiceTypeParam,
              isFirstLogin: isFirstLoginParam,
              failedRecoveryAttempts: failedRecoveryAttemptsParam,
              lastFailedRecoveryAttempt: lastFailedRecoveryAttemptParam);

          return object;
        }),
    AchievementModel: obx_int.EntityDefinition<AchievementModel>(
        model: _entities[7],
        toOneRelations: (AchievementModel object) => [],
        toManyRelations: (AchievementModel object) => {},
        getId: (AchievementModel object) => object.id,
        setId: (AchievementModel object, int id) {
          object.id = id;
        },
        objectToFB: (AchievementModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final iconNameOffset = fbb.writeString(object.iconName);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addOffset(3, iconNameOffset);
          fbb.addInt64(4, object.pointValue);
          fbb.addInt64(5, object.progressCurrent);
          fbb.addInt64(6, object.progressTarget);
          fbb.addBool(7, object.isUnlocked);
          fbb.addInt64(8, object.unlockedDate?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.dbType);
          fbb.addInt64(10, object.dbRarity);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final unlockedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final iconNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final pointValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final progressTargetParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final progressCurrentParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final isUnlockedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final unlockedDateParam = unlockedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(unlockedDateValue);
          final object = AchievementModel(
              id: idParam,
              title: titleParam,
              description: descriptionParam,
              iconName: iconNameParam,
              pointValue: pointValueParam,
              progressTarget: progressTargetParam,
              progressCurrent: progressCurrentParam,
              isUnlocked: isUnlockedParam,
              unlockedDate: unlockedDateParam)
            ..dbType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 22)
            ..dbRarity = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 24);

          return object;
        }),
    IslamicContentModel: obx_int.EntityDefinition<IslamicContentModel>(
        model: _entities[8],
        toOneRelations: (IslamicContentModel object) => [],
        toManyRelations: (IslamicContentModel object) => {},
        getId: (IslamicContentModel object) => object.id,
        setId: (IslamicContentModel object, int id) {
          object.id = id;
        },
        objectToFB: (IslamicContentModel object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final sourceOffset = fbb.writeString(object.source);
          final referenceOffset = fbb.writeString(object.reference);
          final translationOffset = object.translation == null
              ? null
              : fbb.writeString(object.translation!);
          final explanationOffset = object.explanation == null
              ? null
              : fbb.writeString(object.explanation!);
          final tagsOffset = fbb.writeString(object.tags);
          final tagsListOffset = fbb.writeList(
              object.tagsList.map(fbb.writeString).toList(growable: false));
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addOffset(2, sourceOffset);
          fbb.addOffset(3, referenceOffset);
          fbb.addOffset(4, translationOffset);
          fbb.addOffset(5, explanationOffset);
          fbb.addBool(6, object.isFavorite);
          fbb.addInt64(7, object.dateAdded.millisecondsSinceEpoch);
          fbb.addInt64(8, object.lastDisplayed?.millisecondsSinceEpoch);
          fbb.addInt64(9, object.displayCount);
          fbb.addOffset(10, tagsOffset);
          fbb.addOffset(11, tagsListOffset);
          fbb.addInt64(12, object.dbContentType);
          fbb.addInt64(13, object.dbCategory);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastDisplayedValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final translationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final explanationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final dateAddedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0));
          final lastDisplayedParam = lastDisplayedValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastDisplayedValue);
          final displayCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final tagsParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 24, '');
          final object = IslamicContentModel(
              id: idParam,
              content: contentParam,
              source: sourceParam,
              reference: referenceParam,
              translation: translationParam,
              explanation: explanationParam,
              isFavorite: isFavoriteParam,
              dateAdded: dateAddedParam,
              lastDisplayed: lastDisplayedParam,
              displayCount: displayCountParam,
              tags: tagsParam)
            ..tagsList = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 26, [])
            ..dbContentType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..dbCategory = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 30);

          return object;
        }),
    StatisticsModel: obx_int.EntityDefinition<StatisticsModel>(
        model: _entities[9],
        toOneRelations: (StatisticsModel object) => [],
        toManyRelations: (StatisticsModel object) => {},
        getId: (StatisticsModel object) => object.id,
        setId: (StatisticsModel object, int id) {
          object.id = id;
        },
        objectToFB: (StatisticsModel object, fb.Builder fbb) {
          final triggerDatesJsonOffset =
              fbb.writeString(object.triggerDatesJson);
          final slipDatesJsonOffset = fbb.writeString(object.slipDatesJson);
          final milestoneDatesJsonOffset =
              fbb.writeString(object.milestoneDatesJson);
          final triggerPatternJsonOffset =
              fbb.writeString(object.triggerPatternJson);
          final timePatternJsonOffset = fbb.writeString(object.timePatternJson);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.currentStreak);
          fbb.addInt64(2, object.bestStreak);
          fbb.addInt64(3, object.streakStartDate?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastUpdatedDate.millisecondsSinceEpoch);
          fbb.addOffset(5, triggerDatesJsonOffset);
          fbb.addOffset(6, slipDatesJsonOffset);
          fbb.addOffset(7, milestoneDatesJsonOffset);
          fbb.addInt64(8, object.totalEmergenciesSurvived);
          fbb.addInt64(9, object.totalChallengesCompleted);
          fbb.addFloat64(10, object.weeklyImprovement);
          fbb.addFloat64(11, object.monthlyImprovement);
          fbb.addOffset(12, triggerPatternJsonOffset);
          fbb.addOffset(13, timePatternJsonOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final streakStartDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final currentStreakParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final bestStreakParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final streakStartDateParam = streakStartDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(streakStartDateValue);
          final lastUpdatedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final triggerDatesJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, '');
          final slipDatesJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, '');
          final milestoneDatesJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, '');
          final totalEmergenciesSurvivedParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final totalChallengesCompletedParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final weeklyImprovementParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final monthlyImprovementParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final triggerPatternJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final timePatternJsonParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 30, '');
          final object = StatisticsModel(
              id: idParam,
              currentStreak: currentStreakParam,
              bestStreak: bestStreakParam,
              streakStartDate: streakStartDateParam,
              lastUpdatedDate: lastUpdatedDateParam,
              triggerDatesJson: triggerDatesJsonParam,
              slipDatesJson: slipDatesJsonParam,
              milestoneDatesJson: milestoneDatesJsonParam,
              totalEmergenciesSurvived: totalEmergenciesSurvivedParam,
              totalChallengesCompleted: totalChallengesCompletedParam,
              weeklyImprovement: weeklyImprovementParam,
              monthlyImprovement: monthlyImprovementParam,
              triggerPatternJson: triggerPatternJsonParam,
              timePatternJson: timePatternJsonParam);

          return object;
        }),
    ChallengeModel: obx_int.EntityDefinition<ChallengeModel>(
        model: _entities[10],
        toOneRelations: (ChallengeModel object) => [],
        toManyRelations: (ChallengeModel object) => {},
        getId: (ChallengeModel object) => object.id,
        setId: (ChallengeModel object, int id) {
          object.id = id;
        },
        objectToFB: (ChallengeModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final descriptionOffset = fbb.writeString(object.description);
          final verificationStepsOffset =
              fbb.writeString(object.verificationSteps);
          fbb.startTable(15);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.dbCategory);
          fbb.addInt64(4, object.dbDifficulty);
          fbb.addInt64(5, object.dbStatus);
          fbb.addInt64(6, object.assignedDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.completedDate?.millisecondsSinceEpoch);
          fbb.addBool(8, object.isCustom);
          fbb.addInt64(9, object.pointValue);
          fbb.addOffset(10, verificationStepsOffset);
          fbb.addInt64(11, object.dbCategoryValue);
          fbb.addInt64(12, object.dbDifficultyValue);
          fbb.addInt64(13, object.dbStatusValue);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final completedDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final assignedDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0));
          final completedDateParam = completedDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(completedDateValue);
          final isCustomParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 20, false);
          final pointValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final verificationStepsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, '');
          final object = ChallengeModel(
              id: idParam,
              title: titleParam,
              description: descriptionParam,
              assignedDate: assignedDateParam,
              completedDate: completedDateParam,
              isCustom: isCustomParam,
              pointValue: pointValueParam,
              verificationSteps: verificationStepsParam)
            ..dbCategory =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10)
            ..dbDifficulty =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12)
            ..dbStatus =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14)
            ..dbCategoryValue =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 26)
            ..dbDifficultyValue =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28)
            ..dbStatusValue = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 30);

          return object;
        }),
    HadithModel: obx_int.EntityDefinition<HadithModel>(
        model: _entities[11],
        toOneRelations: (HadithModel object) => [],
        toManyRelations: (HadithModel object) => {},
        getId: (HadithModel object) => object.id,
        setId: (HadithModel object, int id) {
          object.id = id;
        },
        objectToFB: (HadithModel object, fb.Builder fbb) {
          final textOffset = fbb.writeString(object.text);
          final narratorOffset = fbb.writeString(object.narrator);
          final sourceOffset = fbb.writeString(object.source);
          final referenceOffset = fbb.writeString(object.reference);
          final translationOffset = object.translation == null
              ? null
              : fbb.writeString(object.translation!);
          final explanationOffset = object.explanation == null
              ? null
              : fbb.writeString(object.explanation!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, textOffset);
          fbb.addOffset(2, narratorOffset);
          fbb.addOffset(3, sourceOffset);
          fbb.addOffset(4, referenceOffset);
          fbb.addOffset(5, translationOffset);
          fbb.addOffset(6, explanationOffset);
          fbb.addBool(7, object.isFavorite);
          fbb.addInt64(8, object.lastShownDate?.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastShownDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 20);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final textParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final narratorParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final sourceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final referenceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final translationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final explanationParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final lastShownDateParam = lastShownDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastShownDateValue);
          final object = HadithModel(
              id: idParam,
              text: textParam,
              narrator: narratorParam,
              source: sourceParam,
              reference: referenceParam,
              translation: translationParam,
              explanation: explanationParam,
              isFavorite: isFavoriteParam,
              lastShownDate: lastShownDateParam);

          return object;
        }),
    ChatSession: obx_int.EntityDefinition<ChatSession>(
        model: _entities[12],
        toOneRelations: (ChatSession object) => [],
        toManyRelations: (ChatSession object) => {},
        getId: (ChatSession object) => object.id,
        setId: (ChatSession object, int id) {
          object.id = id;
        },
        objectToFB: (ChatSession object, fb.Builder fbb) {
          final uidOffset = fbb.writeString(object.uid);
          final titleOffset = fbb.writeString(object.title);
          final topicOffset =
              object.topic == null ? null : fbb.writeString(object.topic!);
          final tagsOffset = fbb.writeList(
              object.tags.map(fbb.writeString).toList(growable: false));
          final selectedModelOffset = object.selectedModel == null
              ? null
              : fbb.writeString(object.selectedModel!);
          final metadataOffset = object.metadata == null
              ? null
              : fbb.writeString(object.metadata!);
          final preferredModelOffset = object.preferredModel == null
              ? null
              : fbb.writeString(object.preferredModel!);
          fbb.startTable(21);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uidOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addInt64(3, object.createdAt.millisecondsSinceEpoch);
          fbb.addInt64(4, object.lastModified.millisecondsSinceEpoch);
          fbb.addOffset(5, topicOffset);
          fbb.addInt64(6, object.messageCount);
          fbb.addOffset(9, tagsOffset);
          fbb.addOffset(10, selectedModelOffset);
          fbb.addBool(11, object.isArchived);
          fbb.addBool(12, object.isFavorite);
          fbb.addOffset(13, metadataOffset);
          fbb.addInt64(14, object.dbSessionType);
          fbb.addInt64(15, object.dbServiceType);
          fbb.addOffset(16, preferredModelOffset);
          fbb.addBool(17, object.allowDataTraining);
          fbb.addFloat64(18, object.temperature);
          fbb.addInt64(19, object.maxTokens);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final uidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final lastModifiedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0));
          final topicParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final messageCountParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final tagsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 22, []);
          final selectedModelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 24);
          final isArchivedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 26, false);
          final isFavoriteParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 28, false);
          final metadataParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 30);
          final preferredModelParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 36);
          final allowDataTrainingParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 38, false);
          final temperatureParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0);
          final maxTokensParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 42, 0);
          final object = ChatSession(
              id: idParam,
              uid: uidParam,
              title: titleParam,
              createdAt: createdAtParam,
              lastModified: lastModifiedParam,
              topic: topicParam,
              messageCount: messageCountParam,
              tags: tagsParam,
              selectedModel: selectedModelParam,
              isArchived: isArchivedParam,
              isFavorite: isFavoriteParam,
              metadata: metadataParam,
              preferredModel: preferredModelParam,
              allowDataTraining: allowDataTrainingParam,
              temperature: temperatureParam,
              maxTokens: maxTokensParam)
            ..dbSessionType =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 32)
            ..dbServiceType = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 34);

          return object;
        }),
    ChatHistorySettingsModel:
        obx_int.EntityDefinition<ChatHistorySettingsModel>(
            model: _entities[13],
            toOneRelations: (ChatHistorySettingsModel object) => [],
            toManyRelations: (ChatHistorySettingsModel object) => {},
            getId: (ChatHistorySettingsModel object) => object.id,
            setId: (ChatHistorySettingsModel object, int id) {
              object.id = id;
            },
            objectToFB: (ChatHistorySettingsModel object, fb.Builder fbb) {
              fbb.startTable(5);
              fbb.addInt64(0, object.id);
              fbb.addBool(1, object.storeChatHistory);
              fbb.addInt64(2, object.autoDeleteAfterDays);
              fbb.addInt64(3, object.lastCleared.millisecondsSinceEpoch);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final storeChatHistoryParam =
                  const fb.BoolReader().vTableGet(buffer, rootOffset, 6, false);
              final autoDeleteAfterDaysParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
              final lastClearedParam = DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
              final object = ChatHistorySettingsModel(
                  id: idParam,
                  storeChatHistory: storeChatHistoryParam,
                  autoDeleteAfterDays: autoDeleteAfterDaysParam,
                  lastCleared: lastClearedParam);

              return object;
            })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AspirationModel] entity fields to define ObjectBox queries.
class AspirationModel_ {
  /// see [AspirationModel.id]
  static final id =
      obx.QueryIntegerProperty<AspirationModel>(_entities[0].properties[0]);

  /// see [AspirationModel.uid]
  static final uid =
      obx.QueryStringProperty<AspirationModel>(_entities[0].properties[1]);

  /// see [AspirationModel.dua]
  static final dua =
      obx.QueryStringProperty<AspirationModel>(_entities[0].properties[2]);

  /// see [AspirationModel.isAchieved]
  static final isAchieved =
      obx.QueryBooleanProperty<AspirationModel>(_entities[0].properties[3]);

  /// see [AspirationModel.targetDate]
  static final targetDate =
      obx.QueryDateProperty<AspirationModel>(_entities[0].properties[4]);

  /// see [AspirationModel.note]
  static final note =
      obx.QueryStringProperty<AspirationModel>(_entities[0].properties[5]);

  /// see [AspirationModel.createdAt]
  static final createdAt =
      obx.QueryDateProperty<AspirationModel>(_entities[0].properties[6]);

  /// see [AspirationModel.achievedDate]
  static final achievedDate =
      obx.QueryDateProperty<AspirationModel>(_entities[0].properties[7]);

  /// see [AspirationModel.isEncrypted]
  static final isEncrypted =
      obx.QueryBooleanProperty<AspirationModel>(_entities[0].properties[8]);

  /// see [AspirationModel.dbCategory]
  static final dbCategory =
      obx.QueryIntegerProperty<AspirationModel>(_entities[0].properties[9]);
}

/// [ChatHistorySettings] entity fields to define ObjectBox queries.
class ChatHistorySettings_ {
  /// see [ChatHistorySettings.id]
  static final id =
      obx.QueryIntegerProperty<ChatHistorySettings>(_entities[1].properties[0]);

  /// see [ChatHistorySettings.storeChatHistory]
  static final storeChatHistory =
      obx.QueryBooleanProperty<ChatHistorySettings>(_entities[1].properties[1]);

  /// see [ChatHistorySettings.autoDeleteAfterDays]
  static final autoDeleteAfterDays =
      obx.QueryIntegerProperty<ChatHistorySettings>(_entities[1].properties[2]);

  /// see [ChatHistorySettings.lastCleared]
  static final lastCleared =
      obx.QueryDateProperty<ChatHistorySettings>(_entities[1].properties[3]);
}

/// [ChatMessageModel] entity fields to define ObjectBox queries.
class ChatMessageModel_ {
  /// see [ChatMessageModel.id]
  static final id =
      obx.QueryIntegerProperty<ChatMessageModel>(_entities[2].properties[0]);

  /// see [ChatMessageModel.uid]
  static final uid =
      obx.QueryStringProperty<ChatMessageModel>(_entities[2].properties[1]);

  /// see [ChatMessageModel.content]
  static final content =
      obx.QueryStringProperty<ChatMessageModel>(_entities[2].properties[2]);

  /// see [ChatMessageModel.isUserMessage]
  static final isUserMessage =
      obx.QueryBooleanProperty<ChatMessageModel>(_entities[2].properties[3]);

  /// see [ChatMessageModel.timestamp]
  static final timestamp =
      obx.QueryDateProperty<ChatMessageModel>(_entities[2].properties[4]);

  /// see [ChatMessageModel.isEncrypted]
  static final isEncrypted =
      obx.QueryBooleanProperty<ChatMessageModel>(_entities[2].properties[5]);

  /// see [ChatMessageModel.role]
  static final role =
      obx.QueryStringProperty<ChatMessageModel>(_entities[2].properties[6]);

  /// see [ChatMessageModel.wasHelpful]
  static final wasHelpful =
      obx.QueryBooleanProperty<ChatMessageModel>(_entities[2].properties[7]);

  /// see [ChatMessageModel.session]
  static final session = obx.QueryRelationToOne<ChatMessageModel, ChatSession>(
      _entities[2].properties[8]);
}

/// [EmergencySession] entity fields to define ObjectBox queries.
class EmergencySession_ {
  /// see [EmergencySession.id]
  static final id =
      obx.QueryIntegerProperty<EmergencySession>(_entities[3].properties[0]);

  /// see [EmergencySession.sessionId]
  static final sessionId =
      obx.QueryStringProperty<EmergencySession>(_entities[3].properties[1]);

  /// see [EmergencySession.startTime]
  static final startTime =
      obx.QueryDateProperty<EmergencySession>(_entities[3].properties[2]);

  /// see [EmergencySession.endTime]
  static final endTime =
      obx.QueryDateProperty<EmergencySession>(_entities[3].properties[3]);

  /// see [EmergencySession.activeTriggerIds]
  static final activeTriggerIds =
      obx.QueryStringProperty<EmergencySession>(_entities[3].properties[4]);

  /// see [EmergencySession.wasAIGuidanceShown]
  static final wasAIGuidanceShown =
      obx.QueryBooleanProperty<EmergencySession>(_entities[3].properties[5]);

  /// see [EmergencySession.notes]
  static final notes =
      obx.QueryStringProperty<EmergencySession>(_entities[3].properties[6]);

  /// see [EmergencySession.intensity]
  static final intensity =
      obx.QueryIntegerProperty<EmergencySession>(_entities[3].properties[7]);

  /// see [EmergencySession.wasSuccessful]
  static final wasSuccessful =
      obx.QueryBooleanProperty<EmergencySession>(_entities[3].properties[8]);

  /// see [EmergencySession.helpfulStrategies]
  static final helpfulStrategies =
      obx.QueryStringProperty<EmergencySession>(_entities[3].properties[9]);
}

/// [HobbyModel] entity fields to define ObjectBox queries.
class HobbyModel_ {
  /// see [HobbyModel.id]
  static final id =
      obx.QueryIntegerProperty<HobbyModel>(_entities[4].properties[0]);

  /// see [HobbyModel.uid]
  static final uid =
      obx.QueryStringProperty<HobbyModel>(_entities[4].properties[1]);

  /// see [HobbyModel.name]
  static final name =
      obx.QueryStringProperty<HobbyModel>(_entities[4].properties[2]);

  /// see [HobbyModel.description]
  static final description =
      obx.QueryStringProperty<HobbyModel>(_entities[4].properties[3]);

  /// see [HobbyModel.createdAt]
  static final createdAt =
      obx.QueryDateProperty<HobbyModel>(_entities[4].properties[4]);

  /// see [HobbyModel.isEncrypted]
  static final isEncrypted =
      obx.QueryBooleanProperty<HobbyModel>(_entities[4].properties[5]);

  /// see [HobbyModel.frequencyGoal]
  static final frequencyGoal =
      obx.QueryStringProperty<HobbyModel>(_entities[4].properties[6]);

  /// see [HobbyModel.durationGoalMinutes]
  static final durationGoalMinutes =
      obx.QueryIntegerProperty<HobbyModel>(_entities[4].properties[7]);

  /// see [HobbyModel.satisfactionRating]
  static final satisfactionRating =
      obx.QueryIntegerProperty<HobbyModel>(_entities[4].properties[8]);

  /// see [HobbyModel.lastPracticedAt]
  static final lastPracticedAt =
      obx.QueryDateProperty<HobbyModel>(_entities[4].properties[9]);

  /// see [HobbyModel.dbCategory]
  static final dbCategory =
      obx.QueryIntegerProperty<HobbyModel>(_entities[4].properties[10]);
}

/// [Trigger] entity fields to define ObjectBox queries.
class Trigger_ {
  /// see [Trigger.id]
  static final id =
      obx.QueryIntegerProperty<Trigger>(_entities[5].properties[0]);

  /// see [Trigger.triggerId]
  static final triggerId =
      obx.QueryStringProperty<Trigger>(_entities[5].properties[1]);

  /// see [Trigger.description]
  static final description =
      obx.QueryStringProperty<Trigger>(_entities[5].properties[2]);

  /// see [Trigger.intensity]
  static final intensity =
      obx.QueryIntegerProperty<Trigger>(_entities[5].properties[3]);

  /// see [Trigger.createdAt]
  static final createdAt =
      obx.QueryDateProperty<Trigger>(_entities[5].properties[4]);

  /// see [Trigger.notes]
  static final notes =
      obx.QueryStringProperty<Trigger>(_entities[5].properties[5]);

  /// see [Trigger.activeTimes]
  static final activeTimes =
      obx.QueryStringProperty<Trigger>(_entities[5].properties[6]);

  /// see [Trigger.activeDays]
  static final activeDays =
      obx.QueryStringProperty<Trigger>(_entities[5].properties[7]);

  /// see [Trigger.activeTimesList]
  static final activeTimesList =
      obx.QueryStringVectorProperty<Trigger>(_entities[5].properties[8]);

  /// see [Trigger.activeDaysList]
  static final activeDaysList =
      obx.QueryIntegerVectorProperty<Trigger>(_entities[5].properties[9]);

  /// see [Trigger.dbTriggerType]
  static final dbTriggerType =
      obx.QueryIntegerProperty<Trigger>(_entities[5].properties[10]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = obx.QueryIntegerProperty<User>(_entities[6].properties[0]);

  /// see [User.hashedPassword]
  static final hashedPassword =
      obx.QueryStringProperty<User>(_entities[6].properties[1]);

  /// see [User.passwordSalt]
  static final passwordSalt =
      obx.QueryStringProperty<User>(_entities[6].properties[2]);

  /// see [User.lastLoginDate]
  static final lastLoginDate =
      obx.QueryDateProperty<User>(_entities[6].properties[3]);

  /// see [User.securityQuestions]
  static final securityQuestions =
      obx.QueryStringProperty<User>(_entities[6].properties[4]);

  /// see [User.recoveryCodes]
  static final recoveryCodes =
      obx.QueryStringProperty<User>(_entities[6].properties[5]);

  /// see [User.customApiKey]
  static final customApiKey =
      obx.QueryStringProperty<User>(_entities[6].properties[6]);

  /// see [User.apiServiceType]
  static final apiServiceType =
      obx.QueryStringProperty<User>(_entities[6].properties[7]);

  /// see [User.isFirstLogin]
  static final isFirstLogin =
      obx.QueryBooleanProperty<User>(_entities[6].properties[8]);

  /// see [User.failedRecoveryAttempts]
  static final failedRecoveryAttempts =
      obx.QueryIntegerProperty<User>(_entities[6].properties[9]);

  /// see [User.lastFailedRecoveryAttempt]
  static final lastFailedRecoveryAttempt =
      obx.QueryDateProperty<User>(_entities[6].properties[10]);
}

/// [AchievementModel] entity fields to define ObjectBox queries.
class AchievementModel_ {
  /// see [AchievementModel.id]
  static final id =
      obx.QueryIntegerProperty<AchievementModel>(_entities[7].properties[0]);

  /// see [AchievementModel.title]
  static final title =
      obx.QueryStringProperty<AchievementModel>(_entities[7].properties[1]);

  /// see [AchievementModel.description]
  static final description =
      obx.QueryStringProperty<AchievementModel>(_entities[7].properties[2]);

  /// see [AchievementModel.iconName]
  static final iconName =
      obx.QueryStringProperty<AchievementModel>(_entities[7].properties[3]);

  /// see [AchievementModel.pointValue]
  static final pointValue =
      obx.QueryIntegerProperty<AchievementModel>(_entities[7].properties[4]);

  /// see [AchievementModel.progressCurrent]
  static final progressCurrent =
      obx.QueryIntegerProperty<AchievementModel>(_entities[7].properties[5]);

  /// see [AchievementModel.progressTarget]
  static final progressTarget =
      obx.QueryIntegerProperty<AchievementModel>(_entities[7].properties[6]);

  /// see [AchievementModel.isUnlocked]
  static final isUnlocked =
      obx.QueryBooleanProperty<AchievementModel>(_entities[7].properties[7]);

  /// see [AchievementModel.unlockedDate]
  static final unlockedDate =
      obx.QueryDateProperty<AchievementModel>(_entities[7].properties[8]);

  /// see [AchievementModel.dbType]
  static final dbType =
      obx.QueryIntegerProperty<AchievementModel>(_entities[7].properties[9]);

  /// see [AchievementModel.dbRarity]
  static final dbRarity =
      obx.QueryIntegerProperty<AchievementModel>(_entities[7].properties[10]);
}

/// [IslamicContentModel] entity fields to define ObjectBox queries.
class IslamicContentModel_ {
  /// see [IslamicContentModel.id]
  static final id =
      obx.QueryIntegerProperty<IslamicContentModel>(_entities[8].properties[0]);

  /// see [IslamicContentModel.content]
  static final content =
      obx.QueryStringProperty<IslamicContentModel>(_entities[8].properties[1]);

  /// see [IslamicContentModel.source]
  static final source =
      obx.QueryStringProperty<IslamicContentModel>(_entities[8].properties[2]);

  /// see [IslamicContentModel.reference]
  static final reference =
      obx.QueryStringProperty<IslamicContentModel>(_entities[8].properties[3]);

  /// see [IslamicContentModel.translation]
  static final translation =
      obx.QueryStringProperty<IslamicContentModel>(_entities[8].properties[4]);

  /// see [IslamicContentModel.explanation]
  static final explanation =
      obx.QueryStringProperty<IslamicContentModel>(_entities[8].properties[5]);

  /// see [IslamicContentModel.isFavorite]
  static final isFavorite =
      obx.QueryBooleanProperty<IslamicContentModel>(_entities[8].properties[6]);

  /// see [IslamicContentModel.dateAdded]
  static final dateAdded =
      obx.QueryDateProperty<IslamicContentModel>(_entities[8].properties[7]);

  /// see [IslamicContentModel.lastDisplayed]
  static final lastDisplayed =
      obx.QueryDateProperty<IslamicContentModel>(_entities[8].properties[8]);

  /// see [IslamicContentModel.displayCount]
  static final displayCount =
      obx.QueryIntegerProperty<IslamicContentModel>(_entities[8].properties[9]);

  /// see [IslamicContentModel.tags]
  static final tags =
      obx.QueryStringProperty<IslamicContentModel>(_entities[8].properties[10]);

  /// see [IslamicContentModel.tagsList]
  static final tagsList = obx.QueryStringVectorProperty<IslamicContentModel>(
      _entities[8].properties[11]);

  /// see [IslamicContentModel.dbContentType]
  static final dbContentType = obx.QueryIntegerProperty<IslamicContentModel>(
      _entities[8].properties[12]);

  /// see [IslamicContentModel.dbCategory]
  static final dbCategory = obx.QueryIntegerProperty<IslamicContentModel>(
      _entities[8].properties[13]);
}

/// [StatisticsModel] entity fields to define ObjectBox queries.
class StatisticsModel_ {
  /// see [StatisticsModel.id]
  static final id =
      obx.QueryIntegerProperty<StatisticsModel>(_entities[9].properties[0]);

  /// see [StatisticsModel.currentStreak]
  static final currentStreak =
      obx.QueryIntegerProperty<StatisticsModel>(_entities[9].properties[1]);

  /// see [StatisticsModel.bestStreak]
  static final bestStreak =
      obx.QueryIntegerProperty<StatisticsModel>(_entities[9].properties[2]);

  /// see [StatisticsModel.streakStartDate]
  static final streakStartDate =
      obx.QueryDateProperty<StatisticsModel>(_entities[9].properties[3]);

  /// see [StatisticsModel.lastUpdatedDate]
  static final lastUpdatedDate =
      obx.QueryDateProperty<StatisticsModel>(_entities[9].properties[4]);

  /// see [StatisticsModel.triggerDatesJson]
  static final triggerDatesJson =
      obx.QueryStringProperty<StatisticsModel>(_entities[9].properties[5]);

  /// see [StatisticsModel.slipDatesJson]
  static final slipDatesJson =
      obx.QueryStringProperty<StatisticsModel>(_entities[9].properties[6]);

  /// see [StatisticsModel.milestoneDatesJson]
  static final milestoneDatesJson =
      obx.QueryStringProperty<StatisticsModel>(_entities[9].properties[7]);

  /// see [StatisticsModel.totalEmergenciesSurvived]
  static final totalEmergenciesSurvived =
      obx.QueryIntegerProperty<StatisticsModel>(_entities[9].properties[8]);

  /// see [StatisticsModel.totalChallengesCompleted]
  static final totalChallengesCompleted =
      obx.QueryIntegerProperty<StatisticsModel>(_entities[9].properties[9]);

  /// see [StatisticsModel.weeklyImprovement]
  static final weeklyImprovement =
      obx.QueryDoubleProperty<StatisticsModel>(_entities[9].properties[10]);

  /// see [StatisticsModel.monthlyImprovement]
  static final monthlyImprovement =
      obx.QueryDoubleProperty<StatisticsModel>(_entities[9].properties[11]);

  /// see [StatisticsModel.triggerPatternJson]
  static final triggerPatternJson =
      obx.QueryStringProperty<StatisticsModel>(_entities[9].properties[12]);

  /// see [StatisticsModel.timePatternJson]
  static final timePatternJson =
      obx.QueryStringProperty<StatisticsModel>(_entities[9].properties[13]);
}

/// [ChallengeModel] entity fields to define ObjectBox queries.
class ChallengeModel_ {
  /// see [ChallengeModel.id]
  static final id =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[0]);

  /// see [ChallengeModel.title]
  static final title =
      obx.QueryStringProperty<ChallengeModel>(_entities[10].properties[1]);

  /// see [ChallengeModel.description]
  static final description =
      obx.QueryStringProperty<ChallengeModel>(_entities[10].properties[2]);

  /// see [ChallengeModel.dbCategory]
  static final dbCategory =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[3]);

  /// see [ChallengeModel.dbDifficulty]
  static final dbDifficulty =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[4]);

  /// see [ChallengeModel.dbStatus]
  static final dbStatus =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[5]);

  /// see [ChallengeModel.assignedDate]
  static final assignedDate =
      obx.QueryDateProperty<ChallengeModel>(_entities[10].properties[6]);

  /// see [ChallengeModel.completedDate]
  static final completedDate =
      obx.QueryDateProperty<ChallengeModel>(_entities[10].properties[7]);

  /// see [ChallengeModel.isCustom]
  static final isCustom =
      obx.QueryBooleanProperty<ChallengeModel>(_entities[10].properties[8]);

  /// see [ChallengeModel.pointValue]
  static final pointValue =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[9]);

  /// see [ChallengeModel.verificationSteps]
  static final verificationSteps =
      obx.QueryStringProperty<ChallengeModel>(_entities[10].properties[10]);

  /// see [ChallengeModel.dbCategoryValue]
  static final dbCategoryValue =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[11]);

  /// see [ChallengeModel.dbDifficultyValue]
  static final dbDifficultyValue =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[12]);

  /// see [ChallengeModel.dbStatusValue]
  static final dbStatusValue =
      obx.QueryIntegerProperty<ChallengeModel>(_entities[10].properties[13]);
}

/// [HadithModel] entity fields to define ObjectBox queries.
class HadithModel_ {
  /// see [HadithModel.id]
  static final id =
      obx.QueryIntegerProperty<HadithModel>(_entities[11].properties[0]);

  /// see [HadithModel.text]
  static final text =
      obx.QueryStringProperty<HadithModel>(_entities[11].properties[1]);

  /// see [HadithModel.narrator]
  static final narrator =
      obx.QueryStringProperty<HadithModel>(_entities[11].properties[2]);

  /// see [HadithModel.source]
  static final source =
      obx.QueryStringProperty<HadithModel>(_entities[11].properties[3]);

  /// see [HadithModel.reference]
  static final reference =
      obx.QueryStringProperty<HadithModel>(_entities[11].properties[4]);

  /// see [HadithModel.translation]
  static final translation =
      obx.QueryStringProperty<HadithModel>(_entities[11].properties[5]);

  /// see [HadithModel.explanation]
  static final explanation =
      obx.QueryStringProperty<HadithModel>(_entities[11].properties[6]);

  /// see [HadithModel.isFavorite]
  static final isFavorite =
      obx.QueryBooleanProperty<HadithModel>(_entities[11].properties[7]);

  /// see [HadithModel.lastShownDate]
  static final lastShownDate =
      obx.QueryDateProperty<HadithModel>(_entities[11].properties[8]);
}

/// [ChatSession] entity fields to define ObjectBox queries.
class ChatSession_ {
  /// see [ChatSession.id]
  static final id =
      obx.QueryIntegerProperty<ChatSession>(_entities[12].properties[0]);

  /// see [ChatSession.uid]
  static final uid =
      obx.QueryStringProperty<ChatSession>(_entities[12].properties[1]);

  /// see [ChatSession.title]
  static final title =
      obx.QueryStringProperty<ChatSession>(_entities[12].properties[2]);

  /// see [ChatSession.createdAt]
  static final createdAt =
      obx.QueryDateProperty<ChatSession>(_entities[12].properties[3]);

  /// see [ChatSession.lastModified]
  static final lastModified =
      obx.QueryDateProperty<ChatSession>(_entities[12].properties[4]);

  /// see [ChatSession.topic]
  static final topic =
      obx.QueryStringProperty<ChatSession>(_entities[12].properties[5]);

  /// see [ChatSession.messageCount]
  static final messageCount =
      obx.QueryIntegerProperty<ChatSession>(_entities[12].properties[6]);

  /// see [ChatSession.tags]
  static final tags =
      obx.QueryStringVectorProperty<ChatSession>(_entities[12].properties[7]);

  /// see [ChatSession.selectedModel]
  static final selectedModel =
      obx.QueryStringProperty<ChatSession>(_entities[12].properties[8]);

  /// see [ChatSession.isArchived]
  static final isArchived =
      obx.QueryBooleanProperty<ChatSession>(_entities[12].properties[9]);

  /// see [ChatSession.isFavorite]
  static final isFavorite =
      obx.QueryBooleanProperty<ChatSession>(_entities[12].properties[10]);

  /// see [ChatSession.metadata]
  static final metadata =
      obx.QueryStringProperty<ChatSession>(_entities[12].properties[11]);

  /// see [ChatSession.dbSessionType]
  static final dbSessionType =
      obx.QueryIntegerProperty<ChatSession>(_entities[12].properties[12]);

  /// see [ChatSession.dbServiceType]
  static final dbServiceType =
      obx.QueryIntegerProperty<ChatSession>(_entities[12].properties[13]);

  /// see [ChatSession.preferredModel]
  static final preferredModel =
      obx.QueryStringProperty<ChatSession>(_entities[12].properties[14]);

  /// see [ChatSession.allowDataTraining]
  static final allowDataTraining =
      obx.QueryBooleanProperty<ChatSession>(_entities[12].properties[15]);

  /// see [ChatSession.temperature]
  static final temperature =
      obx.QueryDoubleProperty<ChatSession>(_entities[12].properties[16]);

  /// see [ChatSession.maxTokens]
  static final maxTokens =
      obx.QueryIntegerProperty<ChatSession>(_entities[12].properties[17]);
}

/// [ChatHistorySettingsModel] entity fields to define ObjectBox queries.
class ChatHistorySettingsModel_ {
  /// see [ChatHistorySettingsModel.id]
  static final id = obx.QueryIntegerProperty<ChatHistorySettingsModel>(
      _entities[13].properties[0]);

  /// see [ChatHistorySettingsModel.storeChatHistory]
  static final storeChatHistory =
      obx.QueryBooleanProperty<ChatHistorySettingsModel>(
          _entities[13].properties[1]);

  /// see [ChatHistorySettingsModel.autoDeleteAfterDays]
  static final autoDeleteAfterDays =
      obx.QueryIntegerProperty<ChatHistorySettingsModel>(
          _entities[13].properties[2]);

  /// see [ChatHistorySettingsModel.lastCleared]
  static final lastCleared = obx.QueryDateProperty<ChatHistorySettingsModel>(
      _entities[13].properties[3]);
}
