// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/emergency_session_model.dart';
import 'data/models/trigger_model.dart';
import 'data/models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 565911162749560298),
      name: 'EmergencySessionModel',
      lastPropertyId: const obx_int.IdUid(10, 1245832919544223211),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1615750766328326112),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 5571737721030089582),
            name: 'sessionId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 3548844010489133431)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3154935104438855566),
            name: 'startTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4231261392579040681),
            name: 'endTime',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2681554415396974063),
            name: 'activeTriggerIds',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 767168598278742911),
            name: 'wasAIGuidanceShown',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1422745122981706590),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6815928807855179292),
            name: 'intensity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1579482186747108307),
            name: 'wasSuccessful',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 1245832919544223211),
            name: 'helpfulStrategies',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 8755138201011373113),
      name: 'TriggerModel',
      lastPropertyId: const obx_int.IdUid(11, 8278726151384783726),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2167728151839681866),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7620108606640191335),
            name: 'triggerId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(2, 3841213203514361365)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8262529195314612134),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7646292331246731586),
            name: 'triggerTypeValue',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2588605991265152809),
            name: 'intensity',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8245590564100759391),
            name: 'createdAt',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2270421302834360664),
            name: 'notes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 3322285039199958135),
            name: 'activeTimes',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 162608734531038007),
            name: 'activeDays',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5317087322181146925),
            name: 'activeTimesList',
            type: 30,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 8278726151384783726),
            name: 'activeDaysList',
            type: 27,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4857296881808942799),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(8, 5491796628158094474),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1024703197263590431),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8702117622623828049),
            name: 'hashedPassword',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4135519897461469362),
            name: 'passwordSalt',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3324290692423908662),
            name: 'lastLoginDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 2411309932995274532),
            name: 'securityQuestions',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 4795934497715024907),
            name: 'customApiKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 8137783214183318794),
            name: 'apiServiceType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 5491796628158094474),
            name: 'isFirstLogin',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 4857296881808942799),
      lastIndexId: const obx_int.IdUid(2, 3841213203514361365),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    EmergencySession: obx_int.EntityDefinition<EmergencySession>(
        model: _entities[0],
        toOneRelations: (EmergencySession object) => [],
        toManyRelations: (EmergencySession object) => {},
        getId: (EmergencySession object) => object.id,
        setId: (EmergencySession object, int id) {
          object.id = id;
        },
        objectToFB: (EmergencySession object, fb.Builder fbb) {
          final sessionIdOffset = fbb.writeString(object.sessionId);
          final activeTriggerIdsOffset = object.activeTriggerIds == null
              ? null
              : fbb.writeString(object.activeTriggerIds!);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final helpfulStrategiesOffset = object.helpfulStrategies == null
              ? null
              : fbb.writeString(object.helpfulStrategies!);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, sessionIdOffset);
          fbb.addInt64(2, object.startTime.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endTime?.millisecondsSinceEpoch);
          fbb.addOffset(4, activeTriggerIdsOffset);
          fbb.addBool(5, object.wasAIGuidanceShown);
          fbb.addOffset(6, notesOffset);
          fbb.addInt64(7, object.intensity);
          fbb.addBool(8, object.wasSuccessful);
          fbb.addOffset(9, helpfulStrategiesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final endTimeValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final sessionIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final startTimeParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final endTimeParam = endTimeValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(endTimeValue);
          final activeTriggerIdsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final wasAIGuidanceShownParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final intensityParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final wasSuccessfulParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 20);
          final helpfulStrategiesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22);
          final object = EmergencySession(
              id: idParam,
              sessionId: sessionIdParam,
              startTime: startTimeParam,
              endTime: endTimeParam,
              activeTriggerIds: activeTriggerIdsParam,
              wasAIGuidanceShown: wasAIGuidanceShownParam,
              notes: notesParam,
              intensity: intensityParam,
              wasSuccessful: wasSuccessfulParam,
              helpfulStrategies: helpfulStrategiesParam);

          return object;
        }),
    Trigger: obx_int.EntityDefinition<Trigger>(
        model: _entities[1],
        toOneRelations: (Trigger object) => [],
        toManyRelations: (Trigger object) => {},
        getId: (Trigger object) => object.id,
        setId: (Trigger object, int id) {
          object.id = id;
        },
        objectToFB: (Trigger object, fb.Builder fbb) {
          final triggerIdOffset = fbb.writeString(object.triggerId);
          final descriptionOffset = fbb.writeString(object.description);
          final notesOffset =
              object.notes == null ? null : fbb.writeString(object.notes!);
          final activeTimesOffset = object.activeTimes == null
              ? null
              : fbb.writeString(object.activeTimes!);
          final activeDaysOffset = object.activeDays == null
              ? null
              : fbb.writeString(object.activeDays!);
          final activeTimesListOffset = fbb.writeList(object.activeTimesList
              .map(fbb.writeString)
              .toList(growable: false));
          final activeDaysListOffset =
              fbb.writeListInt64(object.activeDaysList);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, triggerIdOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addInt64(3, object.triggerTypeValue);
          fbb.addInt64(4, object.intensity);
          fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
          fbb.addOffset(6, notesOffset);
          fbb.addOffset(7, activeTimesOffset);
          fbb.addOffset(8, activeDaysOffset);
          fbb.addOffset(9, activeTimesListOffset);
          fbb.addOffset(10, activeDaysListOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final triggerIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final triggerTypeValueParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final intensityParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));
          final notesParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final activeTimesParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18);
          final activeDaysParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Trigger(
              id: idParam,
              triggerId: triggerIdParam,
              description: descriptionParam,
              triggerTypeValue: triggerTypeValueParam,
              intensity: intensityParam,
              createdAt: createdAtParam,
              notes: notesParam,
              activeTimes: activeTimesParam,
              activeDays: activeDaysParam)
            ..activeTimesList = const fb.ListReader<String>(
                    fb.StringReader(asciiOptimization: true),
                    lazy: false)
                .vTableGet(buffer, rootOffset, 22, [])
            ..activeDaysList =
                const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                    .vTableGet(buffer, rootOffset, 24, []);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final hashedPasswordOffset = fbb.writeString(object.hashedPassword);
          final passwordSaltOffset = object.passwordSalt == null
              ? null
              : fbb.writeString(object.passwordSalt!);
          final securityQuestionsOffset = object.securityQuestions == null
              ? null
              : fbb.writeString(object.securityQuestions!);
          final customApiKeyOffset = object.customApiKey == null
              ? null
              : fbb.writeString(object.customApiKey!);
          final apiServiceTypeOffset = object.apiServiceType == null
              ? null
              : fbb.writeString(object.apiServiceType!);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, hashedPasswordOffset);
          fbb.addOffset(2, passwordSaltOffset);
          fbb.addInt64(3, object.lastLoginDate?.millisecondsSinceEpoch);
          fbb.addOffset(4, securityQuestionsOffset);
          fbb.addOffset(5, customApiKeyOffset);
          fbb.addOffset(6, apiServiceTypeOffset);
          fbb.addBool(7, object.isFirstLogin);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final lastLoginDateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final hashedPasswordParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final passwordSaltParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final lastLoginDateParam = lastLoginDateValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(lastLoginDateValue);
          final securityQuestionsParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12);
          final customApiKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14);
          final apiServiceTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final isFirstLoginParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false);
          final object = User(
              id: idParam,
              hashedPassword: hashedPasswordParam,
              passwordSalt: passwordSaltParam,
              lastLoginDate: lastLoginDateParam,
              securityQuestions: securityQuestionsParam,
              customApiKey: customApiKeyParam,
              apiServiceType: apiServiceTypeParam,
              isFirstLogin: isFirstLoginParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [EmergencySession] entity fields to define ObjectBox queries.
class EmergencySessionModel_ {
  /// See [EmergencySession.id].
  static final id =
      obx.QueryIntegerProperty<EmergencySession>(_entities[0].properties[0]);

  /// See [EmergencySession.sessionId].
  static final sessionId =
      obx.QueryStringProperty<EmergencySession>(_entities[0].properties[1]);

  /// See [EmergencySession.startTime].
  static final startTime =
      obx.QueryDateProperty<EmergencySession>(_entities[0].properties[2]);

  /// See [EmergencySession.endTime].
  static final endTime =
      obx.QueryDateProperty<EmergencySession>(_entities[0].properties[3]);

  /// See [EmergencySession.activeTriggerIds].
  static final activeTriggerIds =
      obx.QueryStringProperty<EmergencySession>(_entities[0].properties[4]);

  /// See [EmergencySession.wasAIGuidanceShown].
  static final wasAIGuidanceShown =
      obx.QueryBooleanProperty<EmergencySession>(_entities[0].properties[5]);

  /// See [EmergencySession.notes].
  static final notes =
      obx.QueryStringProperty<EmergencySession>(_entities[0].properties[6]);

  /// See [EmergencySession.intensity].
  static final intensity =
      obx.QueryIntegerProperty<EmergencySession>(_entities[0].properties[7]);

  /// See [EmergencySession.wasSuccessful].
  static final wasSuccessful =
      obx.QueryBooleanProperty<EmergencySession>(_entities[0].properties[8]);

  /// See [EmergencySession.helpfulStrategies].
  static final helpfulStrategies =
      obx.QueryStringProperty<EmergencySession>(_entities[0].properties[9]);
}

/// [Trigger] entity fields to define ObjectBox queries.
class TriggerModel_ {
  /// See [Trigger.id].
  static final id =
      obx.QueryIntegerProperty<Trigger>(_entities[1].properties[0]);

  /// See [Trigger.triggerId].
  static final triggerId =
      obx.QueryStringProperty<Trigger>(_entities[1].properties[1]);

  /// See [Trigger.description].
  static final description =
      obx.QueryStringProperty<Trigger>(_entities[1].properties[2]);

  /// See [Trigger.triggerTypeValue].
  static final triggerTypeValue =
      obx.QueryIntegerProperty<Trigger>(_entities[1].properties[3]);

  /// See [Trigger.intensity].
  static final intensity =
      obx.QueryIntegerProperty<Trigger>(_entities[1].properties[4]);

  /// See [Trigger.createdAt].
  static final createdAt =
      obx.QueryDateProperty<Trigger>(_entities[1].properties[5]);

  /// See [Trigger.notes].
  static final notes =
      obx.QueryStringProperty<Trigger>(_entities[1].properties[6]);

  /// See [Trigger.activeTimes].
  static final activeTimes =
      obx.QueryStringProperty<Trigger>(_entities[1].properties[7]);

  /// See [Trigger.activeDays].
  static final activeDays =
      obx.QueryStringProperty<Trigger>(_entities[1].properties[8]);

  /// See [Trigger.activeTimesList].
  static final activeTimesList =
      obx.QueryStringVectorProperty<Trigger>(_entities[1].properties[9]);

  /// See [Trigger.activeDaysList].
  static final activeDaysList =
      obx.QueryIntegerVectorProperty<Trigger>(_entities[1].properties[10]);
}

/// [User] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// See [User.hashedPassword].
  static final hashedPassword =
      obx.QueryStringProperty<User>(_entities[2].properties[1]);

  /// See [User.passwordSalt].
  static final passwordSalt =
      obx.QueryStringProperty<User>(_entities[2].properties[2]);

  /// See [User.lastLoginDate].
  static final lastLoginDate =
      obx.QueryDateProperty<User>(_entities[2].properties[3]);

  /// See [User.securityQuestions].
  static final securityQuestions =
      obx.QueryStringProperty<User>(_entities[2].properties[4]);

  /// See [User.customApiKey].
  static final customApiKey =
      obx.QueryStringProperty<User>(_entities[2].properties[5]);

  /// See [User.apiServiceType].
  static final apiServiceType =
      obx.QueryStringProperty<User>(_entities[2].properties[6]);

  /// See [User.isFirstLogin].
  static final isFirstLogin =
      obx.QueryBooleanProperty<User>(_entities[2].properties[7]);
}
